import React, { useEffect, useState } from 'react'
import Head from 'next/head';
import { GetServerSideProps, NextPage } from 'next';
import RelatedProducts from '@/components/RelatedProducts';
import { ProductType } from '@/types/types';
import ProductItem from '@/components/ProductItem';
import PaginationId from '@/components/PaginationId';


interface Props {
  products: ProductType[];
  randomProducts: ProductType[];

}

const FavoritesPage: NextPage<Props> = ({ randomProducts }) => {

    const [favorites, setFavorites] = useState<ProductType[]>([]);
   
    useEffect(() => {
        const savedFavorites = localStorage.getItem('favorites');
         if (savedFavorites) {
          setFavorites(JSON.parse(savedFavorites));
        }
    }, [favorites]);


  return (
    <>
      <Head>
        <title>Igralishte-Favorites</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

        <div className="container-fluid my-5">
          <div className="row d-flex flex-column justify-content-center">
            <div className="col-5">
                {/* renderiraj gi stavenite vo card to shop produkti */}
                {favorites.map((product: ProductType) => (
                <ProductItem key={product.id} {...product}  />
                ))}
            </div>

            {/* Other Related Product Items  */}
            <RelatedProducts products={randomProducts}/>
            <PaginationId id='' products={randomProducts}/>

      </div>
    </div>
  </>
  );
};


export default FavoritesPage;




 export const getServerSideProps: GetServerSideProps = async ({query}) => { 
     
     const page = parseInt(query.page as string, 10) || 1;
     let randomNo: number | undefined;
     
     const response = await fetch(`http://localhost:5001/products?_page=${page}`); 
     const products: ProductType[] = await response.json();

    products.map(() => {
      if (products.length > 6) {
        randomNo = Math.floor(Math.random() * (products.length - 6));
      }
    });
    

    const resRandomProducts = await fetch(`http://localhost:5001/products?_start=${randomNo}&_limit=6`);
    const randomProducts: ProductType[] = await resRandomProducts.json();


return { 
    props: { 
        products,
        randomProducts,
    },
    }
 }
