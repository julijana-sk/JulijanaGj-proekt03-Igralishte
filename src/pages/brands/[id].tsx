import React, { useEffect, useState } from 'react'
import Head from 'next/head';
import { BrandType, ProductType } from '@/types/types';
import { GetStaticPaths, GetStaticProps, NextPage } from 'next';
import { useRouter } from 'next/router';
import ProductItem from '@/components/ProductItem';
import PageTitle from '@/components/PageTitle';
import PaginationId from '@/components/PaginationId';
import Breadcrumbs from '@/components/Breadcrumbs';

interface Props {
  brands: BrandType[];
  products: ProductType[];
  product: ProductType;
}

const BrandsPage: NextPage<Props> = ({ brands, product, products }) => {

  const breadcrumbs = [
      { name: 'Почетна', url: '/' },
      { name: 'Брендови', url: '/brands' },
      { name: `/brands/${product.brand_name}`, url: `/brands/${product.id}`},
  ];
         
    const router = useRouter();
    const [featuredBrands, setFeaturedBrands] = useState<BrandType[]>([]);
    const [currentPage, setCurrentPage] = useState<number>(1);
    
    useEffect(() => {
        const indexOfLastProduct = currentPage * 10;
        const indexOfFirstProduct = indexOfLastProduct - 10;
        const currentProducts = brands.slice(indexOfFirstProduct, indexOfLastProduct);

            setFeaturedBrands(currentProducts);
    }, [currentPage]);
    
    
    const filteredProducts = products?.filter((item) => {
      if (product.brand == item.brand){
        return true
      }
    })
    
    
return (
    < >
        <Head>
            <title>Igralishte - Brand</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="container">
          <div className="row d-flex flex-column justify-content-center">
          <div className='col-11 ml-3 mt-3 flex-row justify-content-start align-self-center'><Breadcrumbs breadcrumbs={breadcrumbs} /></div>
          {product ? (
              <div className='col-11 mr-auto ml-auto mb-5'>
                <div className="d-flex flex-row align-items-center align-self-center my-3 justify-content-start text-capitalize">
                  <img src="../pictures/icons/sparks-removebg.png" alt="spakrs" className="mr-2" />
                  <PageTitle title={product.brand_name}/>

                </div>
                    <img src={`${product.img}`} alt="picture of brand" className='col-12 p-0 text-center mb-4'/>
                      <p>Концептот на <span className='text-capitalize'>@{product.brand}_ </span> се базира на неколку прашања:</p>
                      <hr className='bg-transparent border-0'/>
                    <div className='col-11 p-0 ml-4'>
                      <p className='my-3 text-left'>{product.description}</p>
                    </div>
                      <p className='about-text text-left mb-5'>{`Погледнете ги производите на ${product.brand} кои ги нудиме во Игралиште. Имаме доста голем избор на Pussy привезоци кои се кул и ултра феминистички, а.к.а. grl pwr.`}</p>
                    <div className="container-fluid">
                      <div className="row flex-column">
                        <h3 className="text-center my-4">Парчиња од брендот:</h3>
                      <div className="row flex-row">
                        {filteredProducts?.map((product) => {
                          return (
                              <div key={product.id} className="col-5 p-0 mb-3 mr-2 product-img-small">
                                <ProductItem {...product}/>
                              </div>
                              )
                            })} 
                          <div className="col-12 text-center">
                            {filteredProducts?.length >= 6 && (
                                <PaginationId id={product.id} products={filteredProducts}/>     
                          )}
                        </div>
                    </div>
                  </div>
                </div>
                </div>
              ) : (
              <p>There are no results...</p>
            )}
      </div>
    </div>
    </>
  ); 
};

export default BrandsPage;


export const getStaticPaths: GetStaticPaths = async () => {

  const response = await fetch('http://localhost:5001/products'); 
  const products: ProductType[] = await response.json();

  const paths = products.map((product: ProductType) => ({
      params: {
        id: product.id,
      },
    }));

  
  return {
    paths,
    fallback: false,
  };
};


export const getStaticProps: GetStaticProps = async ({ params }) => {
  
  let product: ProductType | undefined;
  
  const res = await fetch('http://localhost:5001/brands'); 
  const brands: BrandType[] = await res.json();

  
  const response = await fetch('http://localhost:5001/products'); 
  const products: ProductType[] = await response.json();

  const  resProduct = await fetch(`http://localhost:5001/products/${params?.id}`);
  product = await resProduct.json();


  return {
    props: {
      product,
      products,
      brands
    },
  };
};